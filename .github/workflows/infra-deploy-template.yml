name: Infrastructure deployement

on:
    workflow_call:
        inputs:
            deployment-env:
                description: "enviroment"
                required: true
                type: string
        secrets:
            access-key-id:
                description: 'object store access key'
                required: true
            secret-key:
                description: 'secret key access key'
                required: true
            civo-token:
                description: 'civo access key'
                required: true
jobs: 
    deployment:
        runs-on: ubuntu-latest
        environment: ${{ inputs.deployment-env }}
        steps:
        - uses: actions/checkout@v2
        - name: HashiCorp - Setup Terraform
          uses: hashicorp/setup-terraform@v1.0.1
          env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        - name: Install civo provider
          run: wget -c https://github.com/civo/terraform-provider-civo/releases/download/v0.9.4/terraform-provider-civo_0.9.4_linux_amd64.tar.gz -O - | sudo tar -xz && mv terraform-provider-civo terraform-provider-civo_v0.9.4
        - name: Create structure
          run: mkdir -p .terraform/plugins/linux_amd64 && mv terraform-provider-civo_v0.9.4 .terraform/plugins/linux_amd64/
        - name: Run a one-line script
          id: init
          run: terraform init -backend-config="access_key=${{ secrets.access-key-id }}" -backend-config="secret_key=${{ secrets.secret-key }}"
        - id: validate
          run: terraform validate -no-color
        - id: plan
          run: terraform plan -no-color -var="civo_token=${{ secrets.civo-token }}" -var="access_key_id=${{ secrets.access-key-id }}" -var="secret_key=${{ secrets.secret-key }}"
          continue-on-error: true
        - uses: actions/github-script@0.9.0
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GHT }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`${process.env.PLAN}\`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
        - name: Terraform Apply
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve -var="civo_token=${{ secrets.civo-token }}" -var="access_key_id=${{ secrets.access-key-id }}" -var="secret_key=${{ secrets.secret-key }}"